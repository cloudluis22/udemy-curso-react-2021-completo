{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from \"react\";\nexport const useFetch = url => {\n  _s();\n\n  const [state, setState] = useState({\n    data: null,\n    loading: true,\n    error: null\n  });\n  const isMounted = useRef(true);\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  useEffect(() => {\n    setState({\n      data: null,\n      loading: true,\n      error: null\n    });\n    fetch(url).then(resp => resp.json()).then(data => {\n      setTimeout(() => {\n        setState({\n          loading: false,\n          error: null,\n          data\n        });\n      }, 4000);\n    });\n  }, [url]);\n  return state;\n};\n\n_s(useFetch, \"ciBwAu2wPF5oress1u1k13i9UAM=\");","map":{"version":3,"sources":["C:/Users/JosÃ© Luis/Desktop/React/hooks-app/src/hooks/useFetch.js"],"names":["useEffect","useState","useRef","useFetch","url","state","setState","data","loading","error","isMounted","current","fetch","then","resp","json","setTimeout"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C;AAEA,OAAO,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AAE7B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,OAAO,EAAE,IAAvB;AAA6BC,IAAAA,KAAK,EAAE;AAApC,GAAD,CAAlC;AACA,QAAMC,SAAS,GAAGR,MAAM,CAAC,IAAD,CAAxB;AAEAF,EAAAA,SAAS,CAAE,MAAM;AACb,WAAO,MAAM;AACTU,MAAAA,SAAS,CAACC,OAAV,GAAoB,KAApB;AACH,KAFD;AAGH,GAJQ,EAIN,EAJM,CAAT;AAMAX,EAAAA,SAAS,CAAC,MAAM;AAEZM,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,OAAO,EAAE,IAAvB;AAA6BC,MAAAA,KAAK,EAAE;AAApC,KAAD,CAAR;AAEAG,IAAAA,KAAK,CAACR,GAAD,CAAL,CACKS,IADL,CACUC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADlB,EAEKF,IAFL,CAEUN,IAAI,IAAI;AAEVS,MAAAA,UAAU,CAAC,MAAM;AAEbV,QAAAA,QAAQ,CAAC;AACLE,UAAAA,OAAO,EAAE,KADJ;AAELC,UAAAA,KAAK,EAAE,IAFF;AAGLF,UAAAA;AAHK,SAAD,CAAR;AAMH,OARS,EAQP,IARO,CAAV;AAUH,KAdL;AAgBH,GApBQ,EAoBN,CAACH,GAAD,CApBM,CAAT;AAsBA,SAAOC,KAAP;AAEH,CAnCM;;GAAMF,Q","sourcesContent":["import { useEffect, useState, useRef } from \"react\"\r\n\r\nexport const useFetch = (url) => {\r\n\r\n    const [state, setState] = useState({ data: null, loading: true, error: null });\r\n    const isMounted = useRef(true);\r\n\r\n    useEffect( () => {\r\n        return () => {\r\n            isMounted.current = false;\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        setState({ data: null, loading: true, error: null });\r\n\r\n        fetch(url)\r\n            .then(resp => resp.json())\r\n            .then(data => {\r\n\r\n                setTimeout(() => {\r\n\r\n                    setState({\r\n                        loading: false,\r\n                        error: null,\r\n                        data\r\n                    })\r\n\r\n                }, 4000);\r\n\r\n            });\r\n\r\n    }, [url])\r\n\r\n    return state;\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}