{"ast":null,"code":"import types from '../types/types';\nimport { firebase, googleAuthProvider } from '../firebase/firebaseConfig';\nimport { finishLoading, removeErrorAction, setErrorAction, startLoading } from '../actions/ui';\nexport const startLoginEmailPassword = (email, password) => {\n  return dispatch => {\n    dispatch(startLoading());\n    firebase.auth().signInWithEmailAndPassword(email, password).then(({\n      user\n    }) => {\n      console.log(user);\n      dispatch(login(user.uid, user.displayName));\n      dispatch(removeErrorAction());\n      dispatch(finishLoading());\n    }).catch(() => {\n      dispatch(setErrorAction('No accounts found with provided credentials.'));\n      dispatch(finishLoading());\n    });\n  };\n};\nexport const startRegisterWithEmailPasswordName = (email, password, name) => {\n  return dispatch => {\n    firebase.auth().createUserWithEmailAndPassword(email, password).then(async ({\n      user\n    }) => {\n      await user.updateProfile({\n        displayName: name\n      });\n      console.log(user);\n      dispatch(login(user.uid, user.displayName));\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n};\nexport const startGoogleLogin = () => {\n  return dispatch => {\n    firebase.auth().signInWithPopup(googleAuthProvider).then(({\n      user\n    }) => {\n      dispatch(login(user.uid, user.displayName));\n    });\n  };\n};\nexport const login = (uid, displayName) => {\n  return {\n    type: types.login,\n    payload: {\n      uid,\n      displayName\n    }\n  };\n};\nexport const startLogout = () => {\n  return async dispatch => {\n    await firebase.auth().signOut();\n    dispatch(logout());\n  };\n};\nexport const logout = () => ({\n  type: types.logout\n});","map":{"version":3,"sources":["C:/Users/JosÃ© Luis/Desktop/React/08-journal-app/src/actions/auth.js"],"names":["types","firebase","googleAuthProvider","finishLoading","removeErrorAction","setErrorAction","startLoading","startLoginEmailPassword","email","password","dispatch","auth","signInWithEmailAndPassword","then","user","console","log","login","uid","displayName","catch","startRegisterWithEmailPasswordName","name","createUserWithEmailAndPassword","updateProfile","e","startGoogleLogin","signInWithPopup","type","payload","startLogout","signOut","logout"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,SAASC,QAAT,EAAmBC,kBAAnB,QAA6C,4BAA7C;AAEA,SAASC,aAAT,EAAwBC,iBAAxB,EAA2CC,cAA3C,EAA2DC,YAA3D,QAA+E,eAA/E;AAEA,OAAO,MAAMC,uBAAuB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAExD,SAAQC,QAAD,IAAc;AAEjBA,IAAAA,QAAQ,CAAEJ,YAAY,EAAd,CAAR;AAEAL,IAAAA,QAAQ,CAACU,IAAT,GAAgBC,0BAAhB,CAA2CJ,KAA3C,EAAkDC,QAAlD,EACKI,IADL,CACU,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAJ,MAAAA,QAAQ,CAAEO,KAAK,CAACH,IAAI,CAACI,GAAN,EAAWJ,IAAI,CAACK,WAAhB,CAAP,CAAR;AACAT,MAAAA,QAAQ,CAAEN,iBAAiB,EAAnB,CAAR;AACAM,MAAAA,QAAQ,CAAEP,aAAa,EAAf,CAAR;AACH,KANL,EAOKiB,KAPL,CAOY,MAAM;AACVV,MAAAA,QAAQ,CAAEL,cAAc,CAAC,8CAAD,CAAhB,CAAR;AACAK,MAAAA,QAAQ,CAAEP,aAAa,EAAf,CAAR;AACH,KAVL;AAWH,GAfD;AAiBH,CAnBM;AAqBP,OAAO,MAAMkB,kCAAkC,GAAG,CAACb,KAAD,EAAQC,QAAR,EAAkBa,IAAlB,KAA2B;AAEzE,SAAQZ,QAAD,IAAc;AAEjBT,IAAAA,QAAQ,CAACU,IAAT,GAAgBY,8BAAhB,CAA+Cf,KAA/C,EAAsDC,QAAtD,EACKI,IADL,CACW,OAAO;AAAEC,MAAAA;AAAF,KAAP,KAAoB;AAEzB,YAAMA,IAAI,CAACU,aAAL,CAAmB;AAAEL,QAAAA,WAAW,EAAEG;AAAf,OAAnB,CAAN;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEEJ,MAAAA,QAAQ,CACJO,KAAK,CAACH,IAAI,CAACI,GAAN,EAAWJ,IAAI,CAACK,WAAhB,CADD,CAAR;AAIH,KAVL,EAWKC,KAXL,CAWWK,CAAC,IAAI;AACRV,MAAAA,OAAO,CAACC,GAAR,CAAYS,CAAZ;AACH,KAbL;AAeH,GAjBD;AAmBH,CArBM;AAuBP,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AAClC,SAAQhB,QAAD,IAAc;AAEjBT,IAAAA,QAAQ,CAACU,IAAT,GAAgBgB,eAAhB,CAAgCzB,kBAAhC,EACKW,IADL,CACU,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAChBJ,MAAAA,QAAQ,CACJO,KAAK,CAACH,IAAI,CAACI,GAAN,EAAWJ,IAAI,CAACK,WAAhB,CADD,CAAR;AAGH,KALL;AAMH,GARD;AASH,CAVM;AAYP,OAAO,MAAMF,KAAK,GAAG,CAACC,GAAD,EAAMC,WAAN,KAAsB;AAEvC,SAAO;AACHS,IAAAA,IAAI,EAAE5B,KAAK,CAACiB,KADT;AAEHY,IAAAA,OAAO,EAAE;AACLX,MAAAA,GADK;AAELC,MAAAA;AAFK;AAFN,GAAP;AAQH,CAVM;AAYP,OAAO,MAAMW,WAAW,GAAG,MAAM;AAE7B,SAAO,MAAOpB,QAAP,IAAoB;AACvB,UAAMT,QAAQ,CAACU,IAAT,GAAgBoB,OAAhB,EAAN;AAEArB,IAAAA,QAAQ,CAAEsB,MAAM,EAAR,CAAR;AACH,GAJD;AAMH,CARM;AAUP,OAAO,MAAMA,MAAM,GAAG,OAAO;AACzBJ,EAAAA,IAAI,EAAE5B,KAAK,CAACgC;AADa,CAAP,CAAf","sourcesContent":["import types from '../types/types';\r\nimport { firebase, googleAuthProvider } from '../firebase/firebaseConfig';\r\n\r\nimport { finishLoading, removeErrorAction ,setErrorAction, startLoading } from '../actions/ui'\r\n\r\nexport const startLoginEmailPassword = (email, password) => {\r\n\r\n    return (dispatch) => {\r\n\r\n        dispatch( startLoading() );\r\n\r\n        firebase.auth().signInWithEmailAndPassword(email, password)\r\n            .then(({ user }) => {\r\n                console.log(user);\r\n                dispatch( login(user.uid, user.displayName) );\r\n                dispatch( removeErrorAction() );\r\n                dispatch( finishLoading() );\r\n            })\r\n            .catch( () => {\r\n                dispatch( setErrorAction('No accounts found with provided credentials.') );\r\n                dispatch( finishLoading() );\r\n            });\r\n    }\r\n\r\n}\r\n\r\nexport const startRegisterWithEmailPasswordName = (email, password, name) => {\r\n\r\n    return (dispatch) => {\r\n\r\n        firebase.auth().createUserWithEmailAndPassword(email, password)\r\n            .then( async ({ user }) => {\r\n\r\n              await user.updateProfile({ displayName: name })\r\n              console.log(user);\r\n\r\n                dispatch(\r\n                    login(user.uid, user.displayName)\r\n                );\r\n\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const startGoogleLogin = () => {\r\n    return (dispatch) => {\r\n\r\n        firebase.auth().signInWithPopup(googleAuthProvider)\r\n            .then(({ user }) => {\r\n                dispatch(\r\n                    login(user.uid, user.displayName)\r\n                )\r\n            });\r\n    }\r\n}\r\n\r\nexport const login = (uid, displayName) => {\r\n\r\n    return {\r\n        type: types.login,\r\n        payload: {\r\n            uid,\r\n            displayName\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const startLogout = () => {\r\n\r\n    return async (dispatch) => {\r\n        await firebase.auth().signOut();\r\n\r\n        dispatch( logout() )\r\n    }\r\n\r\n}\r\n\r\nexport const logout = () => ({\r\n    type: types.logout\r\n})"]},"metadata":{},"sourceType":"module"}