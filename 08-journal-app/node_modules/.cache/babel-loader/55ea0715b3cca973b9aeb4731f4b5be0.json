{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jos\\xE9 Luis\\\\Desktop\\\\React\\\\08-journal-app\\\\src\\\\components\\\\routers\\\\AppRouter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport { firebase } from '../../firebase/firebaseConfig';\nimport { useDispatch } from 'react-redux';\nimport AuthRouter from './AuthRouter';\nimport JournalScreen from '../journal/JournalScreen';\nimport { login } from '../../actions/auth';\nimport { PublicRoute } from './PublicRoute';\nimport { PrivateRoute } from './PrivateRoute';\nimport { loadNotes } from '../../helpers/loadNotes';\nimport { setNotes } from '../../actions/notes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AppRouter = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [checking, setChecking] = useState(true);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  console.log(isLoggedIn);\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(async user => {\n      if (user === null || user === void 0 ? void 0 : user.uid) {\n        dispatch(login(user.uid, user.displayName));\n        setIsLoggedIn(true);\n        const notes = await loadNotes(user.uid);\n        dispatch(setNotes(notes));\n      } else {\n        setIsLoggedIn(false);\n      } // Una vez se autentica ya no se está revisando si el usuario está siendo autenticado.\n\n\n      setChecking(false);\n    });\n  }, [dispatch, setChecking, setIsLoggedIn]);\n\n  if (checking) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner round\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(PublicRoute, {\n          isLoggedIn: isLoggedIn,\n          component: AuthRouter,\n          path: \"/auth\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n          exact: true,\n          isLoggedIn: isLoggedIn,\n          path: \"/\",\n          component: JournalScreen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/auth/login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AppRouter, \"zXjht6q4zStpBDVCLaoeBBiJnnw=\", false, function () {\n  return [useDispatch];\n});\n\n_c = AppRouter;\nexport default AppRouter;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppRouter\");","map":{"version":3,"sources":["C:/Users/José Luis/Desktop/React/08-journal-app/src/components/routers/AppRouter.js"],"names":["React","useEffect","useState","BrowserRouter","Router","Switch","Route","Redirect","firebase","useDispatch","AuthRouter","JournalScreen","login","PublicRoute","PrivateRoute","loadNotes","setNotes","AppRouter","dispatch","checking","setChecking","isLoggedIn","setIsLoggedIn","console","log","auth","onAuthStateChanged","user","uid","displayName","notes"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SACIC,aAAa,IAAIC,MADrB,EAEIC,MAFJ,EAGIC,KAHJ,EAIIC,QAJJ,QAKO,kBALP;AAMA,SAASC,QAAT,QAAyB,+BAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,QAAT,QAAyB,qBAAzB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAEpB,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACmB,UAAD,EAAaC,aAAb,IAA8BpB,QAAQ,CAAC,KAAD,CAA5C;AAEAqB,EAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;AAEApB,EAAAA,SAAS,CAAE,MAAM;AAEbO,IAAAA,QAAQ,CAACiB,IAAT,GAAgBC,kBAAhB,CAAoC,MAAOC,IAAP,IAAgB;AAEhD,UAAIA,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAEC,GAAV,EAAe;AACXV,QAAAA,QAAQ,CAACN,KAAK,CAACe,IAAI,CAACC,GAAN,EAAWD,IAAI,CAACE,WAAhB,CAAN,CAAR;AACAP,QAAAA,aAAa,CAAC,IAAD,CAAb;AAEA,cAAMQ,KAAK,GAAG,MAAMf,SAAS,CAACY,IAAI,CAACC,GAAN,CAA7B;AACAV,QAAAA,QAAQ,CAACF,QAAQ,CAACc,KAAD,CAAT,CAAR;AACH,OAND,MAOK;AACDR,QAAAA,aAAa,CAAC,KAAD,CAAb;AACH,OAX+C,CAahD;;;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACH,KAfD;AAiBH,GAnBQ,EAmBN,CAACF,QAAD,EAAWE,WAAX,EAAwBE,aAAxB,CAnBM,CAAT;;AAqBA,MAAIH,QAAJ,EAAc;AACV,wBACI;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;;AAED,sBACI,QAAC,MAAD;AAAA,2BACI;AAAA,6BACI,QAAC,MAAD;AAAA,gCAEI,QAAC,WAAD;AAAa,UAAA,UAAU,EAAGE,UAA1B;AAAuC,UAAA,SAAS,EAAGX,UAAnD;AAAgE,UAAA,IAAI,EAAC;AAArE;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,YAAD;AAAc,UAAA,KAAK,MAAnB;AAAoB,UAAA,UAAU,EAAGW,UAAjC;AAA8C,UAAA,IAAI,EAAC,GAAnD;AAAuD,UAAA,SAAS,EAAGV;AAAnE;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAKI,QAAC,QAAD;AAAU,UAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CAjDD;;GAAMM,S;UAEeR,W;;;KAFfQ,S;AAmDN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n} from \"react-router-dom\";\r\nimport { firebase } from '../../firebase/firebaseConfig';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport AuthRouter from './AuthRouter';\r\nimport JournalScreen from '../journal/JournalScreen';\r\nimport { login } from '../../actions/auth';\r\nimport { PublicRoute } from './PublicRoute';\r\nimport { PrivateRoute } from './PrivateRoute';\r\nimport { loadNotes } from '../../helpers/loadNotes';\r\nimport { setNotes } from '../../actions/notes'\r\n\r\nconst AppRouter = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [checking, setChecking] = useState(true);\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n    console.log(isLoggedIn);\r\n\r\n    useEffect( () => {\r\n\r\n        firebase.auth().onAuthStateChanged( async (user) => {\r\n\r\n            if (user?.uid) {\r\n                dispatch(login(user.uid, user.displayName));\r\n                setIsLoggedIn(true);\r\n\r\n                const notes = await loadNotes(user.uid);\r\n                dispatch(setNotes(notes));\r\n            }\r\n            else {\r\n                setIsLoggedIn(false);\r\n            }\r\n\r\n            // Una vez se autentica ya no se está revisando si el usuario está siendo autenticado.\r\n            setChecking(false)\r\n        })\r\n\r\n    }, [dispatch, setChecking, setIsLoggedIn]);\r\n\r\n    if (checking) {\r\n        return (\r\n            <div className=\"spinner round\"></div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Router>\r\n            <div>\r\n                <Switch>\r\n\r\n                    <PublicRoute isLoggedIn={ isLoggedIn } component={ AuthRouter } path=\"/auth\" />\r\n                    <PrivateRoute exact isLoggedIn={ isLoggedIn } path=\"/\" component={ JournalScreen } />\r\n\r\n                    <Redirect to=\"/auth/login\" />\r\n\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter;"]},"metadata":{},"sourceType":"module"}