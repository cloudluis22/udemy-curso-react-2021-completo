{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Jos\\xE9 Luis/Desktop/React/08-journal-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/Jos\\xE9 Luis/Desktop/React/08-journal-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/Jos\\xE9 Luis/Desktop/React/08-journal-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{BrowserRouter as Router,Switch,Route,Redirect}from\"react-router-dom\";import{firebase}from'../../firebase/firebaseConfig';import{useDispatch}from'react-redux';import AuthRouter from'./AuthRouter';import JournalScreen from'../journal/JournalScreen';import{login}from'../../actions/auth';import{PublicRoute}from'./PublicRoute';import{PrivateRoute}from'./PrivateRoute';import{startLoadingNotes}from'../../actions/notes';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var AppRouter=function AppRouter(){var dispatch=useDispatch();var _useState=useState(true),_useState2=_slicedToArray(_useState,2),checking=_useState2[0],setChecking=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isLoggedIn=_useState4[0],setIsLoggedIn=_useState4[1];console.log(isLoggedIn);useEffect(function(){firebase.auth().onAuthStateChanged(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(user){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(user===null||user===void 0?void 0:user.uid){dispatch(login(user.uid,user.displayName));setIsLoggedIn(true);dispatch(startLoadingNotes(user.uid));}else{setIsLoggedIn(false);}// Una vez se autentica ya no se está revisando si el usuario está siendo autenticado.\nsetChecking(false);case 2:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());},[dispatch,setChecking,setIsLoggedIn]);if(checking){return/*#__PURE__*/_jsx(\"div\",{className:\"spinner round\"});}return/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(Switch,{children:[/*#__PURE__*/_jsx(PublicRoute,{isLoggedIn:isLoggedIn,component:AuthRouter,path:\"/auth\"}),/*#__PURE__*/_jsx(PrivateRoute,{exact:true,isLoggedIn:isLoggedIn,path:\"/\",component:JournalScreen}),/*#__PURE__*/_jsx(Redirect,{to:\"/auth/login\"})]})})});};export default AppRouter;","map":{"version":3,"sources":["C:/Users/José Luis/Desktop/React/08-journal-app/src/components/routers/AppRouter.js"],"names":["React","useEffect","useState","BrowserRouter","Router","Switch","Route","Redirect","firebase","useDispatch","AuthRouter","JournalScreen","login","PublicRoute","PrivateRoute","startLoadingNotes","AppRouter","dispatch","checking","setChecking","isLoggedIn","setIsLoggedIn","console","log","auth","onAuthStateChanged","user","uid","displayName"],"mappings":"4YAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OACIC,aAAa,GAAIC,CAAAA,MADrB,CAEIC,MAFJ,CAGIC,KAHJ,CAIIC,QAJJ,KAKO,kBALP,CAMA,OAASC,QAAT,KAAyB,+BAAzB,CACA,OAASC,WAAT,KAA4B,aAA5B,CAEA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAOC,CAAAA,aAAP,KAA0B,0BAA1B,CACA,OAASC,KAAT,KAAsB,oBAAtB,CACA,OAASC,WAAT,KAA4B,eAA5B,CACA,OAASC,YAAT,KAA6B,gBAA7B,CACA,OAASC,iBAAT,KAAkC,qBAAlC,C,wFAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CAEpB,GAAMC,CAAAA,QAAQ,CAAGR,WAAW,EAA5B,CACA,cAAgCP,QAAQ,CAAC,IAAD,CAAxC,wCAAOgB,QAAP,eAAiBC,WAAjB,eACA,eAAoCjB,QAAQ,CAAC,KAAD,CAA5C,yCAAOkB,UAAP,eAAmBC,aAAnB,eAEAC,OAAO,CAACC,GAAR,CAAYH,UAAZ,EAEAnB,SAAS,CAAE,UAAM,CAEbO,QAAQ,CAACgB,IAAT,GAAgBC,kBAAhB,0FAAoC,iBAAOC,IAAP,kHAEhC,GAAIA,IAAJ,SAAIA,IAAJ,iBAAIA,IAAI,CAAEC,GAAV,CAAe,CACXV,QAAQ,CAACL,KAAK,CAACc,IAAI,CAACC,GAAN,CAAWD,IAAI,CAACE,WAAhB,CAAN,CAAR,CACAP,aAAa,CAAC,IAAD,CAAb,CAEAJ,QAAQ,CAAEF,iBAAiB,CAACW,IAAI,CAACC,GAAN,CAAnB,CAAR,CACH,CALD,IAMK,CACDN,aAAa,CAAC,KAAD,CAAb,CACH,CAED;AACAF,WAAW,CAAC,KAAD,CAAX,CAbgC,sDAApC,gEAgBH,CAlBQ,CAkBN,CAACF,QAAD,CAAWE,WAAX,CAAwBE,aAAxB,CAlBM,CAAT,CAoBA,GAAIH,QAAJ,CAAc,CACV,mBACI,YAAK,SAAS,CAAC,eAAf,EADJ,CAGH,CAED,mBACI,KAAC,MAAD,wBACI,kCACI,MAAC,MAAD,yBAEI,KAAC,WAAD,EAAa,UAAU,CAAGE,UAA1B,CAAuC,SAAS,CAAGV,UAAnD,CAAgE,IAAI,CAAC,OAArE,EAFJ,cAGI,KAAC,YAAD,EAAc,KAAK,KAAnB,CAAoB,UAAU,CAAGU,UAAjC,CAA8C,IAAI,CAAC,GAAnD,CAAuD,SAAS,CAAGT,aAAnE,EAHJ,cAKI,KAAC,QAAD,EAAU,EAAE,CAAC,aAAb,EALJ,GADJ,EADJ,EADJ,CAcH,CAhDD,CAkDA,cAAeK,CAAAA,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n} from \"react-router-dom\";\r\nimport { firebase } from '../../firebase/firebaseConfig';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport AuthRouter from './AuthRouter';\r\nimport JournalScreen from '../journal/JournalScreen';\r\nimport { login } from '../../actions/auth';\r\nimport { PublicRoute } from './PublicRoute';\r\nimport { PrivateRoute } from './PrivateRoute';\r\nimport { startLoadingNotes } from '../../actions/notes'\r\n\r\nconst AppRouter = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [checking, setChecking] = useState(true);\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n    console.log(isLoggedIn);\r\n\r\n    useEffect( () => {\r\n\r\n        firebase.auth().onAuthStateChanged( async (user) => {\r\n\r\n            if (user?.uid) {\r\n                dispatch(login(user.uid, user.displayName));\r\n                setIsLoggedIn(true);\r\n\r\n                dispatch( startLoadingNotes(user.uid) );\r\n            }\r\n            else {\r\n                setIsLoggedIn(false);\r\n            }\r\n\r\n            // Una vez se autentica ya no se está revisando si el usuario está siendo autenticado.\r\n            setChecking(false)\r\n        })\r\n\r\n    }, [dispatch, setChecking, setIsLoggedIn]);\r\n\r\n    if (checking) {\r\n        return (\r\n            <div className=\"spinner round\"></div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Router>\r\n            <div>\r\n                <Switch>\r\n\r\n                    <PublicRoute isLoggedIn={ isLoggedIn } component={ AuthRouter } path=\"/auth\" />\r\n                    <PrivateRoute exact isLoggedIn={ isLoggedIn } path=\"/\" component={ JournalScreen } />\r\n\r\n                    <Redirect to=\"/auth/login\" />\r\n\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter;"]},"metadata":{},"sourceType":"module"}