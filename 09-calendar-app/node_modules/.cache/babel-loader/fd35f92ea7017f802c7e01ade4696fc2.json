{"ast":null,"code":"import moment from 'moment';\nimport { types } from '../types/types';\nconst initialState = {\n  events: [{\n    id: new Date().getTime(),\n    title: 'RTX 3060 Ti',\n    startDate: moment().toDate(),\n    endDate: moment().add(2, 'hours').toDate(),\n    bgcolor: '#fafafa',\n    notes: 'Comprar una RTX 3060 Ti',\n    user: {\n      id: '12345',\n      name: 'Peter Parker'\n    }\n  }],\n  activeEvent: null\n};\nexport const calendarReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.eventSetActive:\n      return { ...state,\n        activeEvent: action.payload\n      };\n\n    case types.eventAddNew:\n      return { ...state,\n        events: [...state.events, action.payload]\n      };\n\n    case types.eventClearActive:\n      return { ...state,\n        activeEvent: null\n      };\n\n    case types.eventUpdated:\n      return { ...state,\n        events: state.events.map(evt => evt.id === action.payload.id ? action.payload : evt)\n      };\n\n    case types.eventDeleted:\n      return { ...state,\n        events: state.events.filter(evt => evt.id !== state.activeEvent.id),\n        activeEvent: null\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/JosÃ© Luis/Desktop/React/09-calendar-app/src/reducers/calendarReducer.js"],"names":["moment","types","initialState","events","id","Date","getTime","title","startDate","toDate","endDate","add","bgcolor","notes","user","name","activeEvent","calendarReducer","state","action","type","eventSetActive","payload","eventAddNew","eventClearActive","eventUpdated","map","evt","eventDeleted","filter"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,CAAC;AACLC,IAAAA,EAAE,EAAE,IAAIC,IAAJ,GAAWC,OAAX,EADC;AAELC,IAAAA,KAAK,EAAE,aAFF;AAGLC,IAAAA,SAAS,EAAER,MAAM,GAAGS,MAAT,EAHN;AAILC,IAAAA,OAAO,EAAEV,MAAM,GAAGW,GAAT,CAAa,CAAb,EAAgB,OAAhB,EAAyBF,MAAzB,EAJJ;AAKLG,IAAAA,OAAO,EAAE,SALJ;AAMLC,IAAAA,KAAK,EAAE,yBANF;AAOLC,IAAAA,IAAI,EAAE;AACFV,MAAAA,EAAE,EAAE,OADF;AAEFW,MAAAA,IAAI,EAAE;AAFJ;AAPD,GAAD,CADS;AAajBC,EAAAA,WAAW,EAAE;AAbI,CAArB;AAgBA,OAAO,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAGhB,YAAT,EAAuBiB,MAAvB,KAAkC;AAE7D,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKnB,KAAK,CAACoB,cAAX;AACI,aAAO,EACH,GAAGH,KADA;AAEHF,QAAAA,WAAW,EAAEG,MAAM,CAACG;AAFjB,OAAP;;AAKJ,SAAKrB,KAAK,CAACsB,WAAX;AACI,aAAO,EACH,GAAGL,KADA;AAEHf,QAAAA,MAAM,EAAE,CACJ,GAAGe,KAAK,CAACf,MADL,EAEJgB,MAAM,CAACG,OAFH;AAFL,OAAP;;AAQJ,SAAKrB,KAAK,CAACuB,gBAAX;AACI,aAAO,EACH,GAAGN,KADA;AAEHF,QAAAA,WAAW,EAAE;AAFV,OAAP;;AAKJ,SAAKf,KAAK,CAACwB,YAAX;AACI,aAAO,EACH,GAAGP,KADA;AAEHf,QAAAA,MAAM,EAAEe,KAAK,CAACf,MAAN,CAAauB,GAAb,CACJC,GAAG,IAAKA,GAAG,CAACvB,EAAJ,KAAWe,MAAM,CAACG,OAAP,CAAelB,EAA3B,GAAkCe,MAAM,CAACG,OAAzC,GAAmDK,GADtD;AAFL,OAAP;;AAOA,SAAK1B,KAAK,CAAC2B,YAAX;AACI,aAAO,EACH,GAAGV,KADA;AAEHf,QAAAA,MAAM,EAAEe,KAAK,CAACf,MAAN,CAAa0B,MAAb,CACJF,GAAG,IAAKA,GAAG,CAACvB,EAAJ,KAAWc,KAAK,CAACF,WAAN,CAAkBZ,EADjC,CAFL;AAKHY,QAAAA,WAAW,EAAE;AALV,OAAP;;AAQR;AACI,aAAOE,KAAP;AAzCR;AA4CH,CA9CM","sourcesContent":["import moment from 'moment';\r\nimport { types } from '../types/types';\r\n\r\nconst initialState = {\r\n    events: [{\r\n        id: new Date().getTime(),\r\n        title: 'RTX 3060 Ti',\r\n        startDate: moment().toDate(),\r\n        endDate: moment().add(2, 'hours').toDate(),\r\n        bgcolor: '#fafafa',\r\n        notes: 'Comprar una RTX 3060 Ti',\r\n        user: {\r\n            id: '12345',\r\n            name: 'Peter Parker'\r\n        }\r\n    }],\r\n    activeEvent: null\r\n};\r\n\r\nexport const calendarReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case types.eventSetActive:\r\n            return {\r\n                ...state,\r\n                activeEvent: action.payload\r\n            }\r\n\r\n        case types.eventAddNew:\r\n            return {\r\n                ...state,\r\n                events: [\r\n                    ...state.events,\r\n                    action.payload\r\n                ]\r\n            }\r\n\r\n        case types.eventClearActive:\r\n            return {\r\n                ...state,\r\n                activeEvent: null\r\n            }\r\n\r\n        case types.eventUpdated:\r\n            return {\r\n                ...state,\r\n                events: state.events.map(\r\n                    evt => (evt.id === action.payload.id ) ? action.payload : evt\r\n                )\r\n            }\r\n\r\n            case types.eventDeleted:\r\n                return {\r\n                    ...state,\r\n                    events: state.events.filter(\r\n                        evt => (evt.id !== state.activeEvent.id)\r\n                    ),\r\n                    activeEvent: null\r\n                }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}