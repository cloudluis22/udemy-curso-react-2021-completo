{"ast":null,"code":"import { convertEvents } from \"../helpers/convertEvents\";\nimport { fetchToken } from \"../helpers/fetch\";\nimport { types } from \"../types/types\";\nexport const eventStartAddNew = event => {\n  return async (dispatch, getState) => {\n    const {\n      uid,\n      name\n    } = getState().auth;\n\n    try {\n      const dbEvent = { ...event,\n        start: event.startDate,\n        end: event.endDate\n      };\n      const response = await fetchToken('events', dbEvent, 'POST');\n      const body = await response.json();\n\n      if (body.ok) {\n        event.id = body.event.id;\n        event.user = {\n          _id: uid,\n          name: name\n        };\n        console.log(event);\n        dispatch(eventAddNew(event));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\nexport const eventStartLoading = () => {\n  return async dispatch => {\n    try {\n      const response = await fetchToken('events');\n      const body = await response.json();\n      const events = convertEvents(body.events);\n      console.log(events);\n    } catch (error) {}\n  };\n};\n\nconst eventAddNew = event => ({\n  type: types.eventAddNew,\n  payload: event\n});\n\nexport const eventSetActive = event => ({\n  type: types.eventSetActive,\n  payload: event\n});\nexport const eventClearActive = () => ({\n  type: types.eventClearActive\n});\nexport const eventUpdated = event => ({\n  type: types.eventUpdated,\n  payload: event\n});\nexport const eventDeleted = () => ({\n  type: types.eventDeleted\n});\n\nconst eventsLoaded = events => ({\n  type: types.eventsLoaded,\n  payload: events\n});","map":{"version":3,"sources":["C:/Users/JosÃ© Luis/Desktop/React/09-calendar-app/src/actions/events.js"],"names":["convertEvents","fetchToken","types","eventStartAddNew","event","dispatch","getState","uid","name","auth","dbEvent","start","startDate","end","endDate","response","body","json","ok","id","user","_id","console","log","eventAddNew","error","eventStartLoading","events","type","payload","eventSetActive","eventClearActive","eventUpdated","eventDeleted","eventsLoaded"],"mappings":"AAAA,SAASA,aAAT,QAA8B,0BAA9B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAO,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AACvC,SAAO,OAAQC,QAAR,EAAkBC,QAAlB,KAAgC;AAEnC,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAgBF,QAAQ,GAAGG,IAAjC;;AAEA,QAAI;AACA,YAAMC,OAAO,GAAG,EACZ,GAAGN,KADS;AAEZO,QAAAA,KAAK,EAAEP,KAAK,CAACQ,SAFD;AAGZC,QAAAA,GAAG,EAAET,KAAK,CAACU;AAHC,OAAhB;AAMA,YAAMC,QAAQ,GAAG,MAAMd,UAAU,CAAC,QAAD,EAAWS,OAAX,EAAoB,MAApB,CAAjC;AACA,YAAMM,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAnB;;AAEA,UAAID,IAAI,CAACE,EAAT,EAAa;AACTd,QAAAA,KAAK,CAACe,EAAN,GAAWH,IAAI,CAACZ,KAAL,CAAWe,EAAtB;AACAf,QAAAA,KAAK,CAACgB,IAAN,GAAa;AACTC,UAAAA,GAAG,EAAEd,GADI;AAETC,UAAAA,IAAI,EAAEA;AAFG,SAAb;AAIAc,QAAAA,OAAO,CAACC,GAAR,CAAYnB,KAAZ;AACAC,QAAAA,QAAQ,CAAEmB,WAAW,CAACpB,KAAD,CAAb,CAAR;AACH;AAEJ,KApBD,CAoBE,OAAOqB,KAAP,EAAc;AACZH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH;AAEJ,GA5BD;AA6BH,CA9BM;AAgCP,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AACnC,SAAO,MAAOrB,QAAP,IAAoB;AAEvB,QAAI;AACA,YAAMU,QAAQ,GAAG,MAAMd,UAAU,CAAC,QAAD,CAAjC;AACA,YAAMe,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAnB;AAEA,YAAMU,MAAM,GAAG3B,aAAa,CAACgB,IAAI,CAACW,MAAN,CAA5B;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYI,MAAZ;AAEH,KAPD,CAOE,OAAOF,KAAP,EAAc,CAEf;AAEJ,GAbD;AAcH,CAfM;;AAiBP,MAAMD,WAAW,GAAIpB,KAAD,KAAY;AAC5BwB,EAAAA,IAAI,EAAE1B,KAAK,CAACsB,WADgB;AAE5BK,EAAAA,OAAO,EAAEzB;AAFmB,CAAZ,CAApB;;AAKA,OAAO,MAAM0B,cAAc,GAAI1B,KAAD,KAAY;AACtCwB,EAAAA,IAAI,EAAE1B,KAAK,CAAC4B,cAD0B;AAEtCD,EAAAA,OAAO,EAAEzB;AAF6B,CAAZ,CAAvB;AAKP,OAAO,MAAM2B,gBAAgB,GAAG,OAAO;AACnCH,EAAAA,IAAI,EAAE1B,KAAK,CAAC6B;AADuB,CAAP,CAAzB;AAIP,OAAO,MAAMC,YAAY,GAAK5B,KAAF,KAAc;AACtCwB,EAAAA,IAAI,EAAE1B,KAAK,CAAC8B,YAD0B;AAEtCH,EAAAA,OAAO,EAAEzB;AAF6B,CAAd,CAArB;AAKP,OAAO,MAAM6B,YAAY,GAAG,OAAO;AAC/BL,EAAAA,IAAI,EAAE1B,KAAK,CAAC+B;AADmB,CAAP,CAArB;;AAIP,MAAMC,YAAY,GAAIP,MAAD,KAAa;AAAEC,EAAAA,IAAI,EAAE1B,KAAK,CAACgC,YAAd;AAA4BL,EAAAA,OAAO,EAAEF;AAArC,CAAb,CAArB","sourcesContent":["import { convertEvents } from \"../helpers/convertEvents\";\r\nimport { fetchToken } from \"../helpers/fetch\";\r\nimport { types } from \"../types/types\";\r\n\r\nexport const eventStartAddNew = (event) => {\r\n    return async ( dispatch, getState ) => {\r\n\r\n        const { uid, name } = getState().auth;\r\n\r\n        try {\r\n            const dbEvent = {\r\n                ...event,\r\n                start: event.startDate,\r\n                end: event.endDate\r\n            }\r\n\r\n            const response = await fetchToken('events', dbEvent, 'POST');\r\n            const body = await response.json();\r\n\r\n            if (body.ok) {\r\n                event.id = body.event.id\r\n                event.user = {\r\n                    _id: uid,\r\n                    name: name\r\n                }\r\n                console.log(event);\r\n                dispatch( eventAddNew(event) );\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    };\r\n};\r\n\r\nexport const eventStartLoading = () => {\r\n    return async (dispatch) => {\r\n\r\n        try {\r\n            const response = await fetchToken('events');\r\n            const body = await response.json();\r\n\r\n            const events = convertEvents(body.events);\r\n            console.log(events);\r\n\r\n        } catch (error) {\r\n\r\n        }\r\n\r\n    };\r\n};\r\n\r\nconst eventAddNew = (event) => ({\r\n    type: types.eventAddNew,\r\n    payload: event\r\n});\r\n\r\nexport const eventSetActive = (event) => ({\r\n    type: types.eventSetActive,\r\n    payload: event\r\n});\r\n\r\nexport const eventClearActive = () => ({\r\n    type: types.eventClearActive\r\n});\r\n\r\nexport const eventUpdated = ( event ) => ({\r\n    type: types.eventUpdated,\r\n    payload: event\r\n});\r\n\r\nexport const eventDeleted = () => ({\r\n    type: types.eventDeleted\r\n});\r\n\r\nconst eventsLoaded = (events) => ({ type: types.eventsLoaded, payload: events });"]},"metadata":{},"sourceType":"module"}