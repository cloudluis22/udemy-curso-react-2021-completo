{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jos\\xE9 Luis\\\\Desktop\\\\React\\\\09-calendar-app\\\\src\\\\components\\\\calendar\\\\CalendarScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from 'moment';\nimport 'moment/locale/es';\nimport { Navbar } from '../ui/Navbar';\nimport { messages } from '../../helpers/calendar-es';\nimport { CalendarEvent } from './CalendarEvent';\nimport { CalendarModal } from './CalendarModal';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport { uiOpenModal } from '../../actions/ui';\nimport { eventSetActive } from '../../actions/events';\nimport { AddNewFab } from '../ui/AddNewFab';\nimport { DeleteEventFab } from '../ui/DeleteEventFab';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmoment.locale('es');\nconst localizer = momentLocalizer(moment);\nexport const CalendarScreen = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    events,\n    activeEvent\n  } = useSelector(state => state.calendar);\n  const [lastView, setLastView] = useState(localStorage.getItem('lastView') || 'month');\n\n  const onDoubleClick = evt => {\n    dispatch(uiOpenModal());\n  };\n\n  const onSelectEvent = evt => {\n    dispatch(eventSetActive(evt));\n  };\n\n  const onViewChange = evt => {\n    setLastView(evt);\n    localStorage.setItem('lastView', evt);\n  };\n\n  const eventStyleGetter = (event, start, end, isSelected) => {\n    const style = {\n      backGroundColor: '#367CF7',\n      borderRadius: '0px',\n      opacity: 0.8,\n      display: 'block',\n      color: 'white'\n    };\n    return {\n      style\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-screen\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      localizer: localizer,\n      events: events,\n      startAccessor: \"startDate\",\n      endAccessor: \"endDate\",\n      messages: messages,\n      eventPropGetter: eventStyleGetter,\n      onDoubleClickEvent: onDoubleClick,\n      onSelectEvent: onSelectEvent,\n      onView: onViewChange,\n      view: lastView,\n      components: {\n        event: CalendarEvent\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AddNewFab, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), activeEvent && /*#__PURE__*/_jsxDEV(DeleteEventFab, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(CalendarModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CalendarScreen, \"1+SAdGbqoPjih5SgkU6yCXbqRZY=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = CalendarScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarScreen\");","map":{"version":3,"sources":["C:/Users/JosÃ© Luis/Desktop/React/09-calendar-app/src/components/calendar/CalendarScreen.js"],"names":["React","useState","useDispatch","useSelector","Calendar","momentLocalizer","moment","Navbar","messages","CalendarEvent","CalendarModal","uiOpenModal","eventSetActive","AddNewFab","DeleteEventFab","locale","localizer","CalendarScreen","dispatch","events","activeEvent","state","calendar","lastView","setLastView","localStorage","getItem","onDoubleClick","evt","onSelectEvent","onViewChange","setItem","eventStyleGetter","event","start","end","isSelected","style","backGroundColor","borderRadius","opacity","display","color"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\r\nimport moment from 'moment';\r\nimport 'moment/locale/es';\r\n\r\nimport { Navbar } from '../ui/Navbar';\r\nimport { messages } from '../../helpers/calendar-es'\r\nimport { CalendarEvent } from './CalendarEvent';\r\n\r\nimport { CalendarModal } from './CalendarModal';\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\r\nimport { uiOpenModal } from '../../actions/ui';\r\nimport { eventSetActive } from '../../actions/events';\r\nimport { AddNewFab } from '../ui/AddNewFab';\r\nimport { DeleteEventFab } from '../ui/DeleteEventFab';\r\n\r\nmoment.locale('es');\r\n\r\nconst localizer = momentLocalizer(moment);\r\n\r\nexport const CalendarScreen = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { events, activeEvent } = useSelector(state => state.calendar);\r\n\r\n    const [lastView, setLastView] = useState(localStorage.getItem('lastView') || 'month');\r\n\r\n    const onDoubleClick = (evt) => {\r\n        dispatch( uiOpenModal() );\r\n    }\r\n\r\n    const onSelectEvent = (evt) => {\r\n        dispatch( eventSetActive(evt) );\r\n    }\r\n\r\n    const onViewChange = (evt) => {\r\n        setLastView(evt);\r\n        localStorage.setItem('lastView', evt)\r\n    }\r\n\r\n    const eventStyleGetter = (event, start, end, isSelected) => {\r\n        const style = {\r\n            backGroundColor: '#367CF7',\r\n            borderRadius: '0px',\r\n            opacity: 0.8,\r\n            display: 'block',\r\n            color: 'white'\r\n        }\r\n\r\n        return {\r\n            style\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"calendar-screen\">\r\n            <Navbar />\r\n\r\n            <Calendar\r\n                localizer={localizer}\r\n                events={ events }\r\n                startAccessor=\"startDate\"\r\n                endAccessor=\"endDate\"\r\n                messages={messages}\r\n                eventPropGetter={ eventStyleGetter }\r\n                onDoubleClickEvent={ onDoubleClick }\r\n                onSelectEvent={ onSelectEvent }\r\n                onView={onViewChange}\r\n                view={ lastView }\r\n                components={ { event: CalendarEvent } }\r\n            />\r\n\r\n            <AddNewFab />\r\n            {\r\n                (activeEvent) &&\r\n                <DeleteEventFab/>\r\n            }\r\n\r\n            <CalendarModal />\r\n\r\n        </div>\r\n    );\r\n};"]},"metadata":{},"sourceType":"module"}